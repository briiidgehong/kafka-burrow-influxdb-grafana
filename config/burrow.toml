# Burrow는 카프카의 모니터링 툴로 Consumer의 LAG을 모니터링할 때 주로 사용된다. 
# 모든 Consumer의 커밋 오프셋을 모니터링한다. 
# 또한 Consumer의 status를 계산한다.
# HTTP 엔드포인트를 통해 상태를 요청할 수 있으며
# 다른 카프카 클러스터의 정보를 제공받을 수 있다. 
# 이메일이나 HTTP 호출을 통해 다른 서비스로 상태를 보낼 수 있는 알람 기능도 있다.

# Burrow는 카프카나 주키퍼에 오프셋을 커밋하는 컨슈머 그룹을 모니터링한다. 
# 또한 컨슈머 그룹이 사용하는 모든 토픽과 파티션을 모니터링한다. 
# 이를 통해 컨슈머의 상태를 종합적으로 보여준다. 
# 또한 Burrow는 여러 HTTP 엔드포인트를 제공하며 
# 이 엔드포인트를 통해서 카프카 클러스터나 컨슈머의 정보를 가져올 수 있다. 
# HTTP 엔드포인트를 사용해서 카프카 클러스터를 관리하는데 도움이 되는 어플리케이션을 개발할 수 있다.

# Burrow는 여러 서브 시스템에 필요한 작업을 분리하는 모듈식 설계를 사용한다.
# Clusters : 카프카 클라이언트를 실행시켜 토픽 목록과 모든 파티션의 HEAD 오프셋을 주기적으로 업데이트 한다.
# Consumers : 레퍼지토리에서 컨슈머 그룹에 대한 정보를 가져온다. 레퍼지토리는 카프카 클러스터(__consumer_offsets 토픽) 혹은 주키퍼가 될 수 있다.
# Storage : 이 모든 정보를 Burrow에 저장한다.
# Evaluator : 특정 컨슈머 그룹에 대한 정보를 Storage 서브시스템에서 가져온다. 그리고 그룹의 상태를 계산한다. 상태를 계산하는 방법에 대해서는 뒤에서 설명하도록 하겠다.
# Notifier : 설정된 간격으로 컨슈머 그룹의 상태를 요청한다. 그리고 설정된 기준을 충족시키는 그룹에 대한 알림을 보낸다. (Email, HTTP 혹은 다른 방법)
# HTTP Server : API 인터페이스를 제공하여 클러스터 및 컨슈머에 대한 정보를 제공한다. HTTP requests에서 Burrow가 제공하는 HTTP 엔트포인트에 대한 설명을 볼 수 있다.


[zookeeper]
servers = ["zookeeper:2181"]
timeout = 6
root-path = "/burrow"

# 카프카 클러스터 연결에 사용되는 profile을 정의
# 클라이언트 버전, 클라이언트 ID, TLS 설정 및 SASL 설정을 함께 그룹화 할 수 있다.
# local_kafka라는 이름으로 다른대에서 참조 가능하다.
[client-profile.local_kafka]
kafka-version = "2.0.1"
client-id = "burrow-local"
# tls = "mytlsprofile"
# sasl = "mysaslprofile"

# [httpserver] 설정은 HTTP Server와 관련된 설정을 포함한다.
[httpserver.mylistener]
address = ":8000"
# timeout = 300
# tls="tls-profile-name"

# [cluster]는 토픽과 오프셋 정보를 가져올 카프카 클러스터를 설정한다.
[cluster.kafka_cluster]
class-name = "kafka"
servers = ["kafka:9092"]
client-profile = "local_kafka"
topic-refresh = 120
offset-refresh = 30

# [consumer]은 컨슈머 그룹 오프셋과 정보를 가져올 단일 레포지토리를 설정한다.
[consumer.local]
class-name = "kafka"
cluster = "kafka_cluster"
servers = ["kafka:9092"]
client-profile = "local_kafka"
group-denylist = "^(console-consumer-|python-kafka-consumer-|quick-).*$"
group-allowlist = ""
